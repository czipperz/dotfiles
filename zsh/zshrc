# -*- shell-script -*-
[[ $- != *i* ]] && return

autoload -U colors && colors
# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"
DISABLE_AUTO_UPDATE="true"
ZSH_THEME="czipperz"
ENABLE_CORRECTION="true"
# DISABLE_UNTRACKED_FILES_DIRTY="true"
plugins=(sudo make)
setopt interactivecomments
source $ZSH/oh-my-zsh.sh

#############################
### Environment variables ###
#############################
export PATH=/bin:/usr/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:\
/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl:\
/home/czipperz/.gem/ruby/2.2.0/bin:/home/czipperz/.perl6/2015.03/bin:\
/home/czipperz/.cargo/bin:/home/czipperz/.gem/ruby/2.3.0/bin:\
/home/czipperz/.cabal/bin
export RUST_SRC_PATH=/home/czipperz/abs/rust/src
fpath=( "$HOME/.oh-my-zsh/functions" $fpath )

LESS=-RXF
export LESS

EDITOR="emacsclient -t"
export EDITOR

bindkey -v
export KEYTIMEOUT=1

function zle-line-init zle-keymap-select {
    RPS1="${${KEYMAP/vicmd/-- NORMAL --}/(main|viins)/-- INSERT --} $EPS1"
    zle reset-prompt
}
zle -N zle-line-init
zle -N zle-keymap-select

bindkey '^P' up-history
bindkey '^N' down-history
bindkey '^?' backward-delete-char
bindkey '^h' backward-delete-char
bindkey '^r' history-incremental-search-backward
bindkey '^a' vi-beginning-of-line
bindkey '^e' vi-end-of-line
bindkey '^f' forward-char
bindkey '^b' backward-char

bindkey -a 'j' backward-char
bindkey -a 'k' down-history
bindkey -a 'l' up-history
bindkey -a ';' forward-char
bindkey -a 'h' vi-repeat-find

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/dsa_id"

###############
### ALIASES ###
###############

## Source config files ##
alias srcrc="source .zshrc"
alias srcx="xrdb -merge -I'$HOME' ~/.Xresources"
alias u="xrdb -merge -I'$HOME' ~/.Xresources; urxvt -e tmux"

## Resets the Xmodmap ##
alias asert="xmodmap '$HOME'/.Xmodmap;exit"
alias qwerty="xmodmap '$HOME'/.Xmodmap.backup;exit"

## Simple ls aliases ##
alias l="/bin/ls --color=auto"
alias lc="/bin/ls --color=never"
alias lb="/bin/ls -F --color=auto"
alias ls="/bin/ls -BF --color=auto"
alias ll="/bin/ls -BFlh --color=auto"
alias la="/bin/ls -FlAh --color=auto" # -A hides `.` and `..`
alias li="/bin/ls -BFli --color=auto" # inode numbers
alias lia="/bin/ls -FliA --color=auto"
alias lsl="/bin/ls -BF --color=auto | cat" # Displays on its own line

# Remove echo interpolation
alias echo="/bin/echo"

# Force multithreading by default.
alias make="make -j5"

alias shutdown="sudo shutdown 0"

# Same as manually typing `sudo !!`
alias plz='sudo $(fc -ln -1)'

alias src='source ~/.zshrc'

## Arch aliases ##
alias pac="sudo pacman"
alias yao="yaourt"
alias syu="yaourt -Syua"

## Simple mount ##
alias mnt="sudo mount"
alias umnt="sudo umount"

## Systemctl ##
alias sc="sudo systemctl"
alias scu="systemctl --user"
alias lllp="systemctl suspend;exit" # Works fine for me lul

## One letter ##
alias g="git"
alias c="cd"
alias b=". b"
alias B="/bin/b"
alias v="vim"
alias p="while true; do ping 8.8.8.8 -c 1; echo; sleep 1; done"
alias s="sudo"
alias e="$EDITOR"
alias R="rm -Rf"

## Emacs stuff ##
alias em="emacs -nw -Q"
alias se="sudoedit"
alias ek="emacsclient -e '(kill-emacs)'"
alias ed="cd;emacs --daemon"
alias er="cd;emacsclient -e '(kill-emacs)'; emacs --daemon; exit"

## Music ##
alias mu="ncmpcpp"
alias mux="ncmpcpp;exit"
alias am="alsamixer -c 0"
alias amx="alsamixer -c 0;exit"
alias pm="pulsemixer"
alias pmx="pulsemixer;exit"

## Systemctl ##
alias sc="sudo systemctl"
alias scu="systemctl --user"
alias scurx="systemctl --user restart xfluxd-args"
alias scusx="systemctl --user stop xfluxd-args"

## Grep aliases ##
alias grep='/bin/grep  --color=always'
alias egrep='/bin/egrep --color=always'
alias fgrep='/bin/fgrep --color=always'
alias fa="find"

# usage: `find -type f | catnamed`
alias catnamed="perl -pe 's/(.*)/printf \"\033[0;31m%s\033[0m\n\" \"\$1\"; cat \"\$1\"\n/' | bash"

## Auto make and test ##
alias tmake="clear;make > /dev/null &&"
alias vakec="while true; do if ./reconfigure; then ./make test; else return; fi; sleep 5; clear; done"

# ssh CGRB
alias cgrb='ssh -p 732 gregoryc@shell.cgrb.oregonstate.edu'

#################
### Functions ###
#################
cleanupemacs() {
    local _dir
    local dir
    for dir in $(find -maxdepth 1 -type d | sort | tail -n +2); do
        if [ "$_dir" = "$(echo "$dir" | perl -pe 's|^\./(.*?)[-]\d*?\.\d*?$|\1|')" ]; then
            rm -R "$dir"
        fi
        _dir="$(echo "$dir" | perl -pe 's|^\./(.*?)[-]\d*?\.\d*?$|\1|')"
    done
}

gri() {
    if [[ -n "$(git status -s)" ]]; then
        git stash && \
        git rebase -i "$@" && \
        git stash pop
    else
        git rebase -i "$@"
    fi
}

rb() {
    while (( $# > 0 )); do
        rm "$1"
        [ -e "$1"\~ ] && rm "$1"\~
        shift
    done
}

grH() {
    if [ $# == 0 ]; then
        git reset HEAD
    else
        git reset HEAD~$@
    fi
}

gp() {
    if [ -n "$(git status -s)" ]; then
	git stash && \
	git pull origin && \
	git stash pop
    else
	git pull origin
    fi
}

gst() {
    local _first=''
    for di in $(/bin/ls -A) '.'; do
        if [ -d "$di" -a "$di" != ".oh-my-zsh" ]; then
            if [ -d "$di/.git" ]; then
                if [ ! -z "$(git -C "$di" status -s)" ]; then
                    if [ ! -z "$_first" ]; then
                        echo;echo
                        printf '\033[1;37m'
                        echo '- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
                        printf '\033[0m'
                    else
                        _first=' '
                    fi
                    printf '\033[1;37m'
                    echo "$di:"
                    printf '\033[0m'
                    git -C "$di" status -sb
                fi
            fi
        fi
    done
}

gpss() {
    git push --set-upstream origin $(git rev-parse --abbrev-ref HEAD)
}

gps() {
    local _status _branch
    for di in $(/bin/ls -A) '.'; do
        if [ -d "$di" -a "$di" != ".oh-my-zsh" ]; then
            if [ -d "$di/.git" ]; then
                _status="$(git -C "$di" status -sb | head -n 1)"
                _branch="$(git -C "$di" rev-parse --abbrev-ref HEAD)"
                if [ -z "$_branch" ]; then _branch=master; fi
                if [    "$_status" != "## $_branch" \
                     -a "$_status" != "## $_branch...origin/$_branch" \
                     -a "$_status" != "## Initial commit on $_branch" ]; then
                    echo
                    printf '\033[1;37m'"$di:"'\033[0m\n'
                    git -C "$di" push "$@"
                    while [ $? -ne 0 ]; do git push "$@"; done
                    echo
                fi
            fi
        fi
    done
}

gpu() {
    for di in $(/bin/ls -A) '.'; do
        if [ -d "$di" ]; then
            if [ -d "$di/.git" ]; then
                echo
                printf '\033[1;37m'"$di:"'\033[0m\n'
                git -C "$di" pull
            fi
        fi
    done
}

findfile() {
    local _firstop
    _firstop="$(find -name "$@" -type f | head -n 1)"
    if [ -n "$_firstop" ]; then
        cd "$(dirname "$_firstop")"
    else
        _firstop="$(find -name "*$@*" -type f | head -n 1)"
        if [ -n "$_firstop" ]; then
            cd "$(dirname "$_firstop")"
        fi
    fi
    cd $(dirname `find -name "*$@*" | head -n 1`)
}

highlight() {
    perl -pe "s/($*)/$fg[red]\1$reset_color/g"
}

#Prints the columns specified
colm() {
    __cols="\$$1"
    shift
    while (( $# > 0 )); do
        __cols="$__cols, \$$1"
        shift
    done
    awk "{ print $__cols }"
}

#Auto `makedir` and `cd`.
mcdp() {
    mkdir -p "$@"
    cd "$@"
}

mcd() {
    mkdir "$@"
    cd "$@"
}

thisdir() {
    echo $(if (( $# == 0 )); then pwd; else echo "$@"; fi | perl -pe 's/(.*\/)*(.*)/$2/')
}

f() {
    find "$@" -not -name '*~'
}

grep2in() {
    flags="$1"; shift
    re="$1"; shift
    find "$@" -type f -not -name '*~' -print0 | xargs -0 grep "$flags" "$re"
}

grepin() {
    re="$1"; shift
    find "$@" -type f -not -name '*~' -print0 | xargs -0 grep "$re"
}

grepa2in() {
    flags="$1"; shift
    re="$1"; shift
    find "$@" -type f -print0 | xargs -0 grep "$flags" "$re"
}

grepain() {
    re="$1"; shift
    find "$@" -type f -print0 | xargs -0 grep "$re"
}

musictophone() {
    (cd
     mkdir phone || exit 1
     printf "\033[0;31m%s\033[0m\n" "Mounting phone:"
     jmtpfs phone || exit 2
     printf "\n\033[0;31m%s\033[0m\n" "Creating diff..."
     diff="$(diff <(ls 'phone/Internal storage/Music') <(ls 'music/s'))"
     printf "\033[0;31m%s\033[0m\n" "Diff:"
     echo "$diff"
     if [ "$diff" ]; then
         cpdiff="$(echo "$diff" | `/bin/which grep` -E '^>')"
         if [ "$cpdiff" ]; then
             echo "$cpdiff" \
                 | perl -pe 's|..||' \
                 | xargs -d '\n' -n 1 printf 'cp "music/s/%s" "phone/Internal storage/Music"\n' \
                 | bash
         fi
         rmdiff="$(echo "$diff" | `/bin/which grep` -E '^<')"
         if [ "$rmdiff" ]; then
             echo "$rmdiff" \
                 | perl -pe 's|..||' \
                 | xargs -d '\n' -n 1 printf 'rm "phone/Internal storage/Music/%s"\n' \
                 | bash
         fi
         echo "Copy in Electronic.m3u"
         cp "music/p/Electronic.m3u" "phone/Internal storage/Music" || exit 5
     fi
     printf "\n\033[0;31m%s\033[0m\n" "Unmounting phone:"
     fusermount -u phone || exit 3
     rm -R phone || exit 4)
}

find() {
    command find "$@" 2>/dev/null
}

# # emacs backup files
# cleanbackups() {
#     find "$@" -name '#*' -o -name '.#*' -o -name '*~' | xargs rm
# }

vickstatus() {
    local arg="$(if [ -n "$1" ]; then echo "$1"; else echo ~/vick; fi)"
    (cd "$arg"
     for dir in . $(/bin/ls plugins | perl -pe 's||plugins/|') \
                  vick-build vick-package; do
         printf '\033[0;01m%s:\033[0m\n' \
                "$(if [ "$dir" = "." ]; then echo vick; else echo "$dir"; fi)"
         git -C "$dir" status -sb
     done)
}

########################
### Auto Run Scripts ###
########################
b='\033[0;34m'
w='\033[0;31m'
g='\033[0;32m'
r='\033[0m'
printf "${b}(${g}let ${b}((${w}me${b}))${r}\n"
printf "  ${b}(${w}be ${b}(${g}free${b})))${r}\n"
unset b w g r

###############
### Sources ###
###############
[[ -s /home/czipperz/.autojump/etc/profile.d/autojump.sh ]] \
    && source /home/czipperz/.autojump/etc/profile.d/autojump.sh
# [[ -s /home/czipperz/.gvm/bin/gvm-init.sh ]] \
#     && source /home/czipperz/.gvm/bin/gvm-init.sh
autoload -U compinit && compinit -u
source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
