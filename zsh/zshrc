# -*- shell-script -*-
[[ $- != *i* ]] && return

#############################
### Environment variables ###
#############################

autoload -U colors && colors

# Path to your oh-my-zsh installation.
export ZSH=/home/czipperz/.oh-my-zsh

ZSH_THEME="czipperz"

ENABLE_CORRECTION="true"

# DISABLE_UNTRACKED_FILES_DIRTY="true"

plugins=(sudo)

# User configuration

setopt interactivecomments

export PATH=/bin:/usr/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl:/home/czipperz/.gem/ruby/2.2.0/bin:/home/czipperz/.perl6/2015.03/bin

fpath=( $HOME/.oh-my-zsh/functions $fpath )

source $ZSH/oh-my-zsh.sh

EDITOR="emacsclient -t"
export EDITOR

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/dsa_id"

###############
### ALIASES ###
###############

## Resets the Xmodmap ##
alias asert="xmodmap $HOME/.Xmodmap;exit"
alias qwerty="xmodmap $HOME/.Xmodmap.backup;exit"

## Simple ls aliases ##
alias l="  /bin/ls -BF"
alias lb=" /bin/ls -F"
alias ls=" /bin/ls -BF"
alias ll=" /bin/ls -BFlh"
alias la=" /bin/ls -FlAh"	# -A hides `.` and `..`
alias li=" /bin/ls -BFli"	# inode numbers
alias lia="/bin/ls -FliA"
alias lsl="/bin/ls -BF | cat"	# Displays on its own line

alias echo="/bin/echo"

# Same as manually typing `sudo !!'
alias plz='sudo $(fc -ln -1)'

## Arch aliases ##
alias pac="sudo pacman"
alias yaourt="yaourt --aur-url https://aur4.archlinux.org"
alias syu="/bin/yaourt --aur-url https://aur4.archlinux.org -Syua"

## Simple mount ##
alias mnt="sudo mount"
alias umnt="sudo umount"

## Systemctl ##
alias sc="sudo systemctl"
alias scu="systemctl --user"
alias lllp="systemctl suspend;exit" # Works fine for me lul

## One letter ##
alias g="git"
alias c="cd"
alias b=". b"
alias d="vimdiff"
alias x="exit"
alias v="vim"
alias p="ping 8.8.8.8"
alias s="sudo"
alias e="$EDITOR"
alias R="rm -Rf"

## Emacs stuff ##
alias se="sudoedit"
alias ek="emacsclient -e '(kill-emacs)'"
alias ed="cd;emacs --daemon"
alias er="cd;emacsclient -e '(kill-emacs)'; emacs --daemon; exit"

## Music ##
alias mu="ncmpcpp"
alias mux="ncmpcpp;exit"
alias am="alsamixer"
alias amx="alsamixer;exit"

## Systemctl ##
alias sc="sudo systemctl"
alias scu="systemctl --user"
alias scurx="systemctl --user restart xfluxd-args"
alias scusx="systemctl --user stop xfluxd-args"

## Grep aliases ##
alias grep=' /bin/grep  --color=always'
alias egrep='/bin/egrep --color=always'
alias fgrep='/bin/fgrep --color=always'

## Auto make and test ##
alias tmake="clear;make > /dev/null &&"

#################
### Functions ###
#################
cleanupemacs() {
    local _dir
    local dir
    for dir in $(find -maxdepth 1 -type d | sort | tail -n +2); do
        if [ "$_dir" = "$(echo "$dir" | perl -pe 's|^\./(.*?)[-]\d*?\.\d*?$|\1|')" ]; then
            rm -R "$dir"
        fi
        _dir="$(echo "$dir" | perl -pe 's|^\./(.*?)[-]\d*?\.\d*?$|\1|')"
    done
}

gri() {
    if [[ -n "$(git status -s)" ]]; then
        git stash
        git rebase -i "$@"
        git stash pop
    else
        git rebase -i "$@"
    fi
}

rb() {
    while (( $# > 0 )); do
        rm "$1"
        [ -e "$1"\~ ] && rm "$1"\~
        shift
    done
}

grH() {
    if [ $# == 0 ]; then
        git reset HEAD
    else
        git reset HEAD~$@
    fi
}

gp() {
    if [ -n "$(git status -s)" ]; then
	git stash
	git pull origin
	git stash pop
    else
	git pull origin
    fi
}

gst() {
    local _asert=''
    function gstFunction() {
        local _back="$(pwd)"
        cd "$di"
        if [ -d ".git" ]; then
            local _status="$(git status -sb)"
            local _branch="$(git branch --list | grep '^\*' | awk '{print $2}')"
            if [    "$_status" != "## ${_branch}" \
                 -a "$_status" != "## ${_branch}...origin/${_branch}" ]; then
                if [ ! -z "$_asert" ]; then
                    echo;echo
                    printf '\033[1;37m'
                    echo '- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
                    printf '\033[0m'
                else
                    _asert=' '
                fi
                printf '\033[1;37m'
                echo "$di:"
                printf '\033[0m'
                git status -sb
            fi
        fi
        cd "$_back"
    }
    for di in $(/bin/ls -A) '.'; do
        if [ -d "$di" -a "$di" != ".oh-my-zsh" ]; then
            gstFunction
        fi
    done
    unfunction gstFunction
}

gpss() {
    git push --set-upstream origin \
        $(git branch --list | grep '^\*' | awk '{print $2}')
}

gps() {
    function gpsFunction() {
        local _back="$(pwd)"
        cd "$di"
        if [ -d ".git" ]; then
            local _status _branch
            _status="$(git status -sb | head -n 1)"
            _branch="$(git branch --list | grep '^\*' | awk '{print $2}')"
            if [ -z "$_branch" ]; then _branch="master"; fi
            if [    "$_status" != "## ${_branch}" \
                 -a "$_status" != "## ${_branch}...origin/${_branch}" \
                 -a "$_status" != "## Initial commit on ${_branch}" ]; then
                echo
                printf '\033[1;37m'"$di:"'\033[0m\n'
                git push "$@"
                while [ $? -ne 0 ]; do git push "$@"; done
                echo
            fi
        fi
        cd "$_back"
    }
    for di in $(/bin/ls -A) '.'; do
        if [ -d "$di" -a "$di" != ".oh-my-zsh" ]; then
            gpsFunction "$@"
        fi
    done
    unfunction gpsFunction
}

findfile() {
    local _firstop
    _firstop="$(find -name "$@" -type f | head -n 1)"
    if [ -n "$_firstop" ]; then
        cd "$(dirname "$_firstop")"
    else
        _firstop="$(find -name "*$@*" -type f | head -n 1)"
        if [ -n "$_firstop" ]; then
            cd "$(dirname "$_firstop")"
        fi
    fi
    cd $(dirname `find -name "*$@*" | head -n 1`)
}

highlight() {
    perl -pe "s/$*/$fg[red]$*$reset_color/g"
}

#Prints the columns specified
colm() {
    __cols="\$$1"
    shift
    while (( $# > 0 )); do
        __cols="$__cols, \$$1"
        shift
    done
    awk "{ print $__cols }"
}

#Auto `makedir` and `cd`.
mcd() {
    mkdir -p $@
    cd $@
}

dirN () {
    echo $(pwd | perl -pe 's/(.*\/)*(.*)/$2/')
}

########################
### Auto Run Scripts ###
########################
b='\033[0;34m'
w='\033[0;31m'
g='\033[0;32m'
r='\033[0m'
printf "${b}(${g}let ${b}((${w}me${b}))${r}\n"
printf "  ${b}(${w}be ${b}(${g}free${b})))${r}\n"
unset b w g r

###############
### Sources ###
###############
[[ -s /home/czipperz/.autojump/etc/profile.d/autojump.sh ]] && source /home/czipperz/.autojump/etc/profile.d/autojump.sh
[[ -s "/home/czipperz/.gvm/bin/gvm-init.sh" ]] && source "/home/czipperz/.gvm/bin/gvm-init.sh"
autoload -U compinit && compinit -u
source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
